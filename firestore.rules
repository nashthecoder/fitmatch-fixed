rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      // Allow reading other users for matching/discovery (limited fields)
      allow read: if request.auth != null && 
                     resource.data.personalData == true;
    }
    
    // Partners can only read/write their own partner document  
    match /partenaires/{partnerId} {
      allow read, write: if request.auth != null && request.auth.uid == partnerId;
      // Allow public reading for discovery
      allow read: if request.auth != null;
    }
    
    // Posts are publicly readable, but only author can write/update
    match /posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.posterInfo.uid;
      allow update, delete: if request.auth != null && 
                               request.auth.uid == resource.data.posterInfo.uid;
    }
    
    // Stories are publicly readable, but only author can write
    match /stories/{storyId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.posterInfo.uid;
      allow update, delete: if request.auth != null && 
                               request.auth.uid == resource.data.posterInfo.uid;
    }
    
    // Events - only creator can write, public can read
    match /events/{eventId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.partenaireId;
      allow update, delete: if request.auth != null && 
                               request.auth.uid == resource.data.partenaireId;
    }
    
    // Ads - only creator can write, public can read
    match /ads/{adId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.partenaire;
      allow update, delete: if request.auth != null && 
                               request.auth.uid == resource.data.partenaire;
    }
    
    // Chats - only participants can access
    match /chats/{chatId} {
      allow read, write: if request.auth != null && 
                            request.auth.uid in resource.data.participants;
      allow create: if request.auth != null && 
                       request.auth.uid in request.resource.data.participants;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, write: if request.auth != null && 
                              request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
      }
    }
    
    // Likes - users can only create/delete their own likes
    match /likes/{likeId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.from || 
                      request.auth.uid == resource.data.to);
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.from;
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.from;
    }
    
    // Superlikes - same as likes
    match /superlikes/{likeId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.from || 
                      request.auth.uid == resource.data.to);
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.from;
      allow delete: if request.auth != null && 
                       request.auth.uid == resource.data.from;
    }
    
    // Matches - both users can read
    match /matches/{matchId} {
      allow read: if request.auth != null && 
                     request.auth.uid in resource.data.users;
      allow create: if request.auth != null;
    }
    
    // Notifications - only recipient can read, system can write
    match /notifications/{notificationId} {
      allow read: if request.auth != null && 
                     request.auth.uid == resource.data.to;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.to;
    }
    
    // Message requests - sender and recipient can read
    match /messageRequests/{requestId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.from || 
                      request.auth.uid == resource.data.to);
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.from;
      allow update: if request.auth != null && 
                       request.auth.uid == resource.data.to;
    }
  }
}
